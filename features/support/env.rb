# IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.

# It is recommended to regenerate this file in the future when you upgrade to a

# newer version of cucumber-rails. Consider adding your own code to a new file

# instead of editing this one. Cucumber will automatically load all features/**/*.rb

# files.

require 'cucumber/rails'

require 'capybara/rspec'

require 'capybara'

require 'selenium-webdriver'

require 'rspec/core'

# Dotenv::Railtie.load

app_host = case ENV['ENVIRONMENT'] #set app_host untuk membuka link default

when 'staging' #jika app_host == staging maka akan membuka url

  'https://backoffice-staging.mokapos.com'

when 'pre-prod' #jika app_host == pre-prod maka akan membuka url

  'https://backoffice-preprod.mokapos.com'

when 'dev' #jika app_host == dev maka akan membuka url

  'https://backoffice-dev.mokapos.com'

when 'prod' #jika app_host == prod maka akan membuka url

  'https://backoffice.mokapos.com'

end

Capybara.app_host = app_host

# Capybara defaults to CSS3 selectors rather than XPath.

# If you'd prefer to use XPath, just uncomment this line and adjust any

# selectors in your step definitions to use the XPath syntax.

# Capybara.default_selector = :xpath

# By default, any exception happening in your Rails application will bubble up

# to Cucumber so that your scenario will fail. This is a different from how

# your application behaves in the production environment, where an error page will

# be rendered instead.

#

# Sometimes we want to override this default behaviour and allow Rails to rescue

# exceptions and display an error page (just like when the app is running in production).

# Typical scenarios where you want to do this is when you test your error pages.

# There are two ways to allow Rails to rescue exceptions:

#

# 1) Tag your scenario (or feature) with @allow-rescue

#

# 2) Set the value below to true. Beware that doing this globally is not

# recommended as it will mask a lot of errors for you!

#

ActionController::Base.allow_rescue = false

# Remove/comment out the lines below if your app doesn't have a database.

# For some databases (like MongoDB and CouchDB) you may need to use :truncation instead.

begin

  DatabaseCleaner.strategy = :transaction

rescue NameError

  raise "You need to add database_cleaner to your Gemfile (in the :test group) if you wish to use it."

end

# You may also want to configure DatabaseCleaner to use different strategies for certain features and scenarios.

# See the DatabaseCleaner documentation for details. Example:

#

#   Before('@no-txn,@javascript,@culerity,@celerity,@javascript') do

#     # { except: [:widgets] } may not do what you expect here

#     # as Cucumber::Rails::Database.javascript_strategy overrides

#     # this setting.

#     DatabaseCleaner.strategy = :truncation

#   end

#

#   Before('not @no-txn', 'not @javascript', 'not @culerity', 'not @celerity', 'not @javascript') do

#     DatabaseCleaner.strategy = :transaction

#   end

#

# Possible values are :truncation and :transaction

# The :transaction strategy is faster, but might give you threading problems.

# See https://github.com/cucumber/cucumber-rails/blob/master/features/choose_javascript_database_strategy.feature

Cucumber::Rails::Database.javascript_strategy = :truncation

# ShowMeTheCookies.register_adapter(:selenium, ShowMeTheCookies::Selenium)

# browser = case choose #set browser untuk menjalankan task

# when 'chrome' #jika browser == chrome maka

#    :selenium_chrome

# when 'firefox' #jika browser == firefox maka

#   :selenium

# when 'sauce' #jika browser != chrome || browser != firefox maka

#   :sauce

# end

#daftarin driver.

Capybara.register_driver :selenium_chrome do |app|
  Capybara::Selenium::Driver.new(app, :browser => :chrome)
end

# :selenium = firefox
# :selenium_chrome = chrome
# :sauce = saucelabs

choose = :sauce

Capybara.default_driver = choose #untuk set driver default yang diambil dari ENV

Capybara.javascript_driver = choose #untuk set  javascript driver default yang diambil dari ENV

# Capybara.current_driver = choose

Before '@javascript' do |scenario| #pastikan tag yang digunakan sama dengan yang ditulis pada feature

  $scenario_name = scenario.feature.name #untuk loger scenario

  page.driver.browser.manage.window.resize_to(1600, 1200) #untuk set besaran windows yang akan dibuka

end

Capybara.default_max_wait_time = 60 #untuk waiting time saat request/load capailities local

Capybara.register_driver :sauce do |app|

      username_saucelabs = "martallin" # username saucelabs yang diambil dari .env

      accessKey_saucelabs = "5f2ef9a0-6320-491f-9c1a-4a715d9ecf26" # access key saucelabs yang diambil dari .env

      # opt.merge! platform

      # caps = Selenium::WebDriver::Remote::Capabilities.send(opt.delete('browser_name').to_sym, opt)

      caps = {"platform":"MAC", #platform yang akan digunakan ex: vista, windows 7 , linux, MAC

              "os":"MAC", #platform yang akan digunakan ex: windows 2008, windows 10, linux, MAC

              "browserName":"chrome", #browser yang akan digunakan

              "browserVersion":"71"} #browser version yang akan digunakan

      url = "https://#{username_saucelabs}:#{accessKey_saucelabs}@ondemand.saucelabs.com/wd/hub" #url saucelabs yang akan diakses

      #set capailities yang akan digunakan

      @driver = Capybara::Selenium::Driver.new(app, {browser: :remote,

                                                     url: url,

                                                     desired_capabilities: caps})

    end
